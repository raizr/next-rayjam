name: WebAssembly

on:
  workflow_dispatch:
  push:
    paths:
      - 'src/**'
      - '.github/workflows/webassembly.yml'
  release:
    types: [published]
    
permissions:
  contents: read

jobs:
  build:
    permissions:
      contents: write       # for actions/upload-release-asset to upload release asset
    runs-on: ubuntu-20.04
    
    env:
      PROJECT_NAME: ${{ github.event.repository.name }}
      PROJECT_BUILD_PATH: ${{ github.event.repository.name }}/src
      PROJECT_RELEASE_PATH: ${{ github.event.repository.name }}_dev_wasm
      
    steps:
    - name: Checkout this repo
      uses: actions/checkout@master
      with:
        path: ${{ env.PROJECT_NAME }}
      
    - name: Checkout raylib repo
      uses: actions/checkout@v4
      with:
        repository: raysan5/raylib
        path: raylib
    - name: Checkout raygui repo
      uses: actions/checkout@v4
      with:
        repository: raysan5/raygui
        path: raygui

    - name: Setup emsdk
      uses: mymindstorm/setup-emsdk@v14
      with:
        version: 3.1.64
        actions-cache-folder: 'emsdk-cache'
        
    - name: Setup Release Paths
      run: |
        echo "PROJECT_RELEASE_PATH=${{ env.PROJECT_NAME }}_v${{ github.event.release.tag_name }}_wasm" >> $GITHUB_ENV
      shell: bash
      if: github.event_name == 'release' && github.event.action == 'published'
    
    - name: Setup Environment
      run: | 
        sudo apt-get update -qq
        sudo apt-get install -y --no-install-recommends libglfw3 libglfw3-dev libx11-dev libxcursor-dev libxrandr-dev libxinerama-dev libxi-dev libxext-dev libxfixes-dev libwayland-dev libxkbcommon-dev
        mkdir ${{ env.PROJECT_RELEASE_PATH }}
        ls
      shell: bash
   
    - name: Build raylib Library
      run: |
        cd raylib/src
        emcc -v
        make PLATFORM=PLATFORM_WEB RAYLIB_BUILD_MODE=RELEASE RAYLIB_LIBTYPE=STATIC EMSDK_PATH="/home/runner/work/${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}/emsdk-cache/emsdk-main" RAYLIB_PROJECT_RELEASE_PATH=. -B

    - name: Build Product
      run: |
        cd ${{ env.PROJECT_NAME }}/src
        make PLATFORM=PLATFORM_WEB BUILD_MODE=RELEASE EMSDK_PATH="/home/runner/work/${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}/emsdk-cache/emsdk-main" PROJECT_BUILD_PATH=. RAYLIB_SRC_PATH=../../raylib/src -B
  
    - name: Generate Artifacts
      run: |
        ls ${{ env.PROJECT_BUILD_PATH }}
        cp ${{ env.PROJECT_BUILD_PATH }}/${{ env.PROJECT_NAME }}.wasm ${{ env.PROJECT_RELEASE_PATH }}/${{ env.PROJECT_NAME }}.wasm
        cp ${{ env.PROJECT_BUILD_PATH }}/${{ env.PROJECT_NAME }}.data ${{ env.PROJECT_RELEASE_PATH }}/${{ env.PROJECT_NAME }}.data
        cp ${{ env.PROJECT_BUILD_PATH }}/${{ env.PROJECT_NAME }}.js ${{ env.PROJECT_RELEASE_PATH }}/${{ env.PROJECT_NAME }}.js
        cp ${{ env.PROJECT_BUILD_PATH }}/${{ env.PROJECT_NAME }}.html ${{ env.PROJECT_RELEASE_PATH }}/index.html
        cp ${{ env.PROJECT_NAME }}/README.md ${{ env.PROJECT_RELEASE_PATH }}/README.md
        cp ${{ env.PROJECT_NAME }}/LICENSE ${{ env.PROJECT_RELEASE_PATH }}/LICENSE
        ls ${{ env.PROJECT_RELEASE_PATH }}
        7z a -tzip -r ./${{ env.PROJECT_RELEASE_PATH }}.zip ./${{ env.PROJECT_RELEASE_PATH }}/*
      shell: bash

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PROJECT_RELEASE_PATH }}.zip
        path: ./${{ env.PROJECT_RELEASE_PATH }}.zip

    - name: Upload ${{ env.PROJECT_RELEASE_PATH }} to itch.io project
      uses: robpc/itchio-upload-action@v1
      with:
        path: ./${{ env.PROJECT_RELEASE_PATH }}.zip
        project: raizr/nextjam
        channel: html
        version: 0.1
        api-key: ${{ secrets.ITCH_API }}

    - name: Upload Artifact to Release
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ env.PROJECT_RELEASE_PATH }}.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      if: github.event_name == 'release' && github.event.action == 'published'
